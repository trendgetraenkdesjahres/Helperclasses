

- seperation zw request und response mit responsegenerator nur angefangen.. zuende machen!
- middleware

1. Before Request Handling:
- Authentication Middleware: Check and validate user authentication before allowing access to certain routes or resources.
- Authorization Middleware: Determine if a user has the necessary permissions to access a resource.
- Logging Middleware: Log information about the request, such as IP address and timestamp.
- Validation Middleware: Validate incoming data to ensure it's well-formed and adheres to expected formats.

2. After Request Handling:
- Response Transformation Middleware: Modify or format the response data before it's sent back to the client. For example, you could transform data into JSON or HTML.
- Caching Middleware: Cache responses to improve performance and reduce server load.

3. Error Handling Middleware:
- Exception Handling Middleware: Catch and handle exceptions that may occur during the request processing. You can generate custom error responses.

class MiddlewareHandler
{
    private array $middlewares = [];

    public function addMiddleware(MiddlewareInterface $middleware)
    {
        $this->middlewares[] = $middleware;
    }

    public function handleRequest(Request $request)
    {
        foreach ($this->middlewares as $middleware) {
            $request = $middleware->handle($request);
        }
        return $request;
    }
}

// Usage in your application logic
$request = new Request();
$middlewareHandler = new MiddlewareHandler();

// Add middleware to the pipeline
$middlewareHandler->addMiddleware(new AuthenticationMiddleware());
$middlewareHandler->addMiddleware(new LoggingMiddleware());
$middlewareHandler->addMiddleware(new ValidationMiddleware());

// Process the request with middleware
$request = $middlewareHandler->handleRequest($request);

// Generate the response
$response = ResponseCreator::get_response($request);
ResponseCreator::response($request, $response);
